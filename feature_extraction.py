# -*- coding: utf-8 -*-
"""Feature Extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iFY8mfR6TarObdB5m0oNzrHlYlqNzZAU
"""

import pandas as pd
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler





# @title
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
path ="/content/drive/MyDrive/dataset/HCLTECH_with_indicators_.csv"
df = pd.read_csv(path)
df.head()

"""# New Section"""

df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d %H:%M:%S%z')
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day'] = df['date'].dt.day
df['hour'] = df['date'].dt.hour
df['minute'] = df['date'].dt.minute
df['day_of_week'] = df['date'].dt.dayofweek

df.info()

df.drop(columns=['date'], inplace=True)

df.close.value_counts()

print(set(df['day_of_week'].values))

df.dropna(subset=['close'], inplace=True)

missing_values = df.isnull().sum()
print(dict(missing_values))

exclude_columns = ['open', 'high', 'low', 'close', 'volume', 'sma5', 'year', 'month', 'day', 'hour', 'minute', 'day_of_week']
df.fillna(df.drop(columns=exclude_columns).mean(), inplace=True)

missing_values = df.isnull().sum()
print(dict(missing_values))

"""# PCA Implementation"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_selection import SelectKBest, f_regression, SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.feature_selection import RFE
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor

# Drop the column 'Within the past 2 years'
X = df.drop(columns=['close'],axis=1)
Y = df['close']

X_encoded = X.dropna()  # Example: Remove rows with missing values

# Scale numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_encoded)

# Create a PCA instance with the desired number of components
n_components = 30
pca = PCA(n_components=n_components)

# Fit and transform your data using PCA
X_pca = pca.fit_transform(X_scaled)

print(X_pca.shape)
# Create a PCA instance with the desired number of components
n_components = 30
pca = PCA(n_components=n_components)

# Fit and transform your data using PCA
X_pca = pca.fit_transform(X_scaled)

# Create a DataFrame with the principal components
import pandas as pd
components_df = pd.DataFrame(data=X_pca, columns=[f'PC{i}' for i in range(1, n_components + 1)])

# Print the components
print(components_df)

pca.explained_variance_ratio_



pca.components_

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor

from sklearn.decomposition import PCA

# Create and fit PCA
n_components = 30  # Choose the desired number of components
pca = PCA(n_components=n_components)
X_pca = pca.fit_transform(X_scaled)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_pca, Y, test_size=0.2, random_state=42)

# Example: Create a DecisionTreeRegressor
model = DecisionTreeRegressor()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error

# Create and train the model
model = DecisionTreeRegressor()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"DecisionTreeRegressor MSE: {mse}")

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Create and train a Linear Regression model
regression_model = LinearRegression()
regression_model.fit(X_train, y_train)  # X_train and y_train should contain your features and target values

# Make predictions
y_pred = regression_model.predict(X_test)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Calculate R-squared
r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2}")

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create and train a RandomForestRegressor model
rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)  # You can adjust the number of trees (n_estimators)

rf_regressor.fit(X_train, y_train)  # X_train and y_train should contain your features and target values

# Make predictions
y_pred = rf_regressor.predict(X_test)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Calculate R-squared
r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2}")

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create and train a KNeighborsRegressor model
knn_regressor = KNeighborsRegressor(n_neighbors=5)  # You can adjust the number of neighbors (n_neighbors)

knn_regressor.fit(X_train, y_train)  # X_train and y_train should contain your features and target values

# Make predictions
y_pred = knn_regressor.predict(X_test)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Calculate R-squared
r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2}")

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor

# Train the Linear Regression model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Train the RandomForest Regressor model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Train the DecisionTree Regressor model
dt_model = DecisionTreeRegressor()
dt_model.fit(X_train, y_train)

# Train the KNeighbors Regressor model
knn_model = KNeighborsRegressor(n_neighbors=5)
knn_model.fit(X_train, y_train)

# Get the feature importances or coefficients for each model
linear_coefs = linear_model.coef_
rf_feature_importances = rf_model.feature_importances_
dt_feature_importances = dt_model.feature_importances_
# KNeighbors Regressor does not provide feature importances

# Identify common features based on feature importances or coefficients
common_features = set()

# Add features with non-zero coefficients/importances from Linear Regression
for i, coef in enumerate(linear_coefs):
    if coef != 0:
        common_features.add(i)

# Add features with non-zero feature importances from RandomForest and DecisionTree
for i, importance in enumerate(rf_feature_importances):
    if importance > 0:
        common_features.add(i)
for i, importance in enumerate(dt_feature_importances):
    if importance > 0:
        common_features.add(i)

# Display the list of common features
common_features = list(common_features)
print("Common Features in All Models:", common_features)

cd = 0
ca = 0

def bd(array, placementlelo):
    global cd
    for step in range(placementlelo - 1):
        for i in range(placementlelo - step - 1):
            if array[i] < array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                cd += 1

def ba(array, placementlelo):
    global ca
    for step in range(placementlelo - 1):
        for i in range(placementlelo - step - 1):
            if array[i] > array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                ca += 1

def main():
    placementlelo = int(input())
    da = list(map(int, input().split()))
    dd = da.copy()

    bd(da, placementlelo)
    ba(dd, placementlelo)

    if cd > ca:
        print(ca)
    else:
        print(cd)

if __name__ == "__main__":
    main()

cd = 0
ca = 0

def bd(array, tcsplacement):
    global cd
    for step in range(tcsplacement - 1):
        for i in range(tcsplacement - step - 1):
            if array[i] < array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                cd += 1

def ba(array, tcsplacement):
    global ca
    for step in range(tcsplacement - 1):
        for i in range(tcsplacement - step - 1):
            if array[i] > array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                ca += 1

def main():
	tcsplacement = int(input())
    da = list(map(int, input().split()))
    dd = da.copy()

    bd(da, tcsplacement)
    ba(dd, tcsplacement)

    if cd > ca:
        print(ca)
    else:
        print(cd)

if __name__ == "__main__":
    main()

def sort_descending(arr, n):
    global cd, ca
    cd = 0
    for step in range(n - 1):
        for i in range(n - step - 1):
            if arr[i] < arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                cd += 1

def sort_ascending(arr, n):
    global cd, ca
    ca = 0
    for step in range(n - 1):
        for i in range(n - step - 1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                ca += 1

if __name__ == "__main__":
    placement_lelo = int(input())
    array_a = list(map(int, input().split()))
    array_d = array_a.copy()

    sort_descending(array_a, placement_lelo)
    sort_ascending(array_d, placement_lelo)

    if cd > ca:
        print(cd)
    else:
        print(ca)

swapped_desc = 0
swapped_asc = 0

def sort_descending(array, tcsplacement):
    global swapped_desc
    for step in range(tcsplacement - 1):
        for i in range(tcsplacement - step - 1):
            if array[i] < array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                swapped_desc += 1

def sort_ascending(array, tcsplacement):
    global swapped_asc
    for step in range(tcsplacement - 1):
        for i in range(tcsplacement - step - 1):
            if array[i] > array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                swapped_asc += 1

def main():
    tcsplacement = int(input())
    array_a = list(map(int, input().split()))
    array_d = array_a.copy()

    bd(array_a, tcsplacement)
    ba(array_d, tcsplacement)

    if swapped_desc > swapped_asc:
        print(swapped_asc)
    else:
        print(swapped_desc)

if __name__ == "__main__":
    main()

def min_swaps_to_beautiful_array(arr):
    n = len(arr)

    # Helper function to find the minimum swaps required to sort the array in ascending order
    def min_swaps_asc(arr):
        swaps = 0
        for i in range(n):
            min_index = i
            for j in range(i+1, n):
                if arr[j] < arr[min_index]:
                    min_index = j
            if min_index != i:
                arr[i], arr[min_index] = arr[min_index], arr[i]
                swaps += 1
        return swaps

    # Helper function to find the minimum swaps required to sort the array in descending order
    def min_swaps_desc(arr):
        swaps = 0
        for i in range(n):
            max_index = i
            for j in range(i+1, n):
                if arr[j] > arr[max_index]:
                    max_index = j
            if max_index != i:
                arr[i], arr[max_index] = arr[max_index], arr[i]
                swaps += 1
        return swaps

    # Calculate minimum swaps for both ascending and descending order
    swaps_asc = min_swaps_asc(arr.copy())
    swaps_desc = min_swaps_desc(arr.copy())

    # Return the minimum of the two
    return min(swaps_asc, swaps_desc)

# Input
n = int(input())
arr = list(map(int, input().split()))

# Output
result = min_swaps_to_beautiful_array(arr)
print(result)

def min_swaps_to_beautiful_array(arr):
    n = len(arr)

    # Helper function to find the minimum swaps required to sort the array in ascending order
    def min_swaps_asc(arr):
        swaps = 0
        for i in range(n):
            min_index = i
            for j in range(i+1, n):
                if arr[j] < arr[min_index]:
                    min_index = j
            if min_index != i:
                arr[i], arr[min_index] = arr[min_index], arr[i]
                swaps += 1
        return swaps

    # Helper function to find the minimum swaps required to sort the array in descending order
    def min_swaps_desc(arr):
        swaps = 0
        for i in range(n):
            max_index = i
            for j in range(i+1, n):
                if arr[j] > arr[max_index]:
                    max_index = j
            if max_index != i:
                arr[i], arr[max_index] = arr[max_index], arr[i]
                swaps += 1
        return swaps

    # Calculate minimum swaps for both ascending and descending order
    swaps_asc = min_swaps_asc(arr.copy())
    swaps_desc = min_swaps_desc(arr.copy())

    # Choose the sorting order that requires fewer swaps
    if swaps_asc < swaps_desc:
        arr.sort()
        return swaps_asc
    else:
        arr.sort(reverse=True)
        return swaps_desc

# Input
n = int(input())
arr = list(map(int, input().split()))

# Output
result = min_swaps_to_beautiful_array(arr)
print(result)

from collections import deque

class UserMainCode(object):

    @classmethod
    def decrypt(cls, input1, input2, input3):
        # Check if tree is empty
        if input3 == 0:
            return []

        # Define functions for each way of storing the tree
        def decode_with_root_between_children(tree):
            q = deque(tree)
            result = []
            while q:
                node = q.popleft()
                if not node: continue
                result.append(node.value)
                q.extend([node.left, node.right])
            return result

        def decode_with_root_before_children(tree):
            q = deque([tree])
            result = []
            while q:
                node = q.popleft()
                if not node: continue
                result.append(node.value)
                q.extendright([node.left, node.right])
            return result

        # Try both ways and return the first valid sequence matching desired output
        sequence1 = decode_with_root_between_children(TreeNode.from_array(input1))
        if sequence1[:3] == [4, 5, 2]:
            return sequence1
        sequence2 = decode_with_root_before_children(TreeNode.from_array(input2))
        if sequence2[:3] == [4, 5, 2]:
            return sequence2

        # No valid sequence found
        return []

# Class to represent a node in the tree
class TreeNode(object):

    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

    @classmethod
    def from_array(cls, array):
        """
        Builds a tree from an array in pre-order traversal.
        """
        n = len(array)
        if n == 0:
            return None
        root = cls(array[0])
        q = deque([root])
        i = 1
        while i < n:
            node = q.popleft()
            if array[i]:
                node.left = cls(array[i])
                q.append(node.left)
            i += 1
            if i < n and array[i]:
                node.right = cls(array[i])
                q.append(node.right)
            i += 1
        return root

def find_sequence(input1, input2, size):
  """
  Finds the correct sequence of numbers for solving the Cryptic Tree puzzle.

  Args:
    input1: List of numbers representing the values in the 1st way (root between children).
    input2: List of numbers representing the values in the 2nd way (root before children).
    size: Size of the list (number of elements).

  Returns:
    List of numbers representing the correct sequence for solving the puzzle.
  """

  # Check if the tree is empty
  if size == 0:
    return []

  # Identify the root node
  if input1[0] not in input2:
    root_index = 0 # Case 1: Root between children
  else:
    root_index = input1.index(input2[0]) # Case 2: Root before children

  # Extract sub-trees rooted at children
  left_subtree, right_subtree = [], []
  if root_index > 0:
    left_subtree = input1[1:root_index] + input2[0:root_index]
  if root_index < size - 1:
    right_subtree = input1[root_index + 1:] + input2[root_index + 1:]

  # Recursively find sequences for sub-trees
  left_sequence = find_sequence(left_subtree, left_subtree, len(left_subtree))
  right_sequence = find_sequence(right_subtree, right_subtree, len(right_subtree))

  # Combine sequences with the root node
  return [input1[root_index]] + left_sequence + right_sequence

# Example usage
input1 = [4, 2, 5, 1, 3]
input2 = [1, 2, 4, 5, 3]
size = 5

sequence = find_sequence(input1, input2, size)
print("Correct sequence:", sequence)